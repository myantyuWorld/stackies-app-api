AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  dva-01-001
  Sample SAM Template for dva-01-001

Globals:
  Function:
    Timeout: 10

Resources:
  OptionsFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: src/
        Handler: app.options_handler
        Role: !GetAtt PostMemberFunctionRole.Arn
        Runtime: python3.9
        Events:
          loginOptions:
            Type: Api
            Properties:
              Path: /{cors+}
              Method: OPTIONS
  GetTechnologyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: technology/src/
      Handler: app.handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /technologies
            Method: get
  # 経験技術API
  GetExperienceTechnologyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: experience_technology/src/
      Handler: app.get_handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /experience_technology
            Method: get
  PostExperienceTechnologyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: experience_technology/src/
      Handler: app.post_handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /experience_technology
            Method: post
  # 基本情報API
  GetBaseInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: base_info/src/
      Handler: app.get_handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /base_info
            Method: get
  PostBaseInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: base_info/src/
      Handler: app.post_handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /base_info
            Method: post
  # 案件対応履歴登録API
  GetProjectInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: project_info/src/
      Handler: app.get_handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /project_info
            Method: get
  PostProjectInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: project_info/src/
      Handler: app.post_handler
      Role: !GetAtt PostMemberFunctionRole.Arn
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /project_info
            Method: post
  PostMemberFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PostMemberFunctionPolicies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:List*
                  - dynamodb:DescribeReservedCapacity*
                  - dynamodb:DescribeLimits
                  - dynamodb:DescribeTimeToLive
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: !GetAtt Table.Arn
# TODO : １つのCloudFormationテンプレートに、複数のテーブルを宣言する | https://dev.classmethod.jp/articles/use-dependson-on-cloudformation/
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      TableName: members
  # 技術マスタ
  TechnologyMasterTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: technologies
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: name
          KeyType: HASH
  # 経験技術マスタ
  ExperienceTechnologiesTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: experience_technologies
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
  # 基本情報マスタ
  BaseInfoTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: base_info
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
  # 案件対応情報マスタ
  ProjectInfoTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: project_info
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: project_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: project_id
          KeyType: RANGE
